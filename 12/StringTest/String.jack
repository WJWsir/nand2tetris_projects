// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLengthOfStr;
    field int lengthOfStr;
    field Array charArr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0) {
            // 10: a arbitrary max length.
            let maxLengthOfStr = 10;
        } else {
            let maxLengthOfStr = maxLength;
        }
        let lengthOfStr = 0;
        let charArr = Array.new(maxLengthOfStr);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do charArr.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return lengthOfStr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        var char c;
        let c = charArr[j];
        return c;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(~((lengthOfStr + 1) > maxLengthOfStr)) {
            let charArr[lengthOfStr] = c;
            let lengthOfStr = lengthOfStr + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let lengthOfStr = lengthOfStr - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, digit, index;
        var boolean isNegative, isNonDigitEncounter;
        let result = 0;
        let index = 0;
        // '-' : 45
        let isNegative = (charArr[0] = 45);
        let isNonDigitEncounter = false;
        if(isNegative) {
            let index = 1;
        }
        while((index < lengthOfStr) & (~isNonDigitEncounter)) {
            let digit = (charArr[index] - 48);
            if( (digit > (-1)) & (digit < 10) ){
                let result = result * 10 + digit;
            } else {
                let isNonDigitEncounter = true;
            }
            let index = index + 1;
        }
        if(isNegative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let lengthOfStr = 0;
        do int2String(val);
        return;
    }
    method void int2String(int val) {
        var boolean isNegative;
        var char c;
        var int lastDigit;
        let isNegative = (val < 0);
        if(isNegative) {
            let val = -val;
            // append '-'.
            let c = 45;
            do appendChar(c);
        }

        let lastDigit = (val - ((val/10) * 10));

        // let c = lastDigit + 48;
        if( (lastDigit + 48) = 48) {
            let c = 48;
        }
        if( (lastDigit + 48) = 49) {
            let c = 49;
        }
        if( (lastDigit + 48) = 50) {
            let c = 50;
        }
        if( (lastDigit + 48) = 51) {
            let c = 51;
        }
        if( (lastDigit + 48) = 52) {
            let c = 52;
        }
        if( (lastDigit + 48) = 53) {
            let c = 53;
        }
        if( (lastDigit + 48) = 54) {
            let c = 54;
        }
        if( (lastDigit + 48) = 55) {
            let c = 55;
        }
        if( (lastDigit + 48) = 56) {
            let c = 56;
        }
        if( (lastDigit + 48) = 57) {
            let c = 57;
        }

        if(val < 10) {
            do appendChar(c);
        } else {
            do int2String((val / 10));
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        var char c;
        let c = 128;
        return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char c;
        let c = 129;
        return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char c;
        let c = 34;
        return c;
    }
}
