// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap;
    static Array memory;    // host RAM.
    static Array freeList;  // a linked list of available memory segments.

    /** Initializes the class. */
    function void init() {
        // the base of the memory array points
        // to the first address in the computerâ€™s RAM (address 0)
        let memory = 0;
        //
        let heap = 2048;
        let freeList = heap;                    // freeList = heapBase.
        let freeList[0] = 0;                    // freeList.*next* field is initialized to null pointer.
        let freeList[1] = (16384 - 2048) - 2;   // freeList.*length* field is initialized to heap size.
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;                // result.
        var Array blocksizeField;       // block size field.
        var Array segmentFirstFit;      // first-fit segment.
        var Array segmentCurrent;       // current segment when traversing.
        var boolean segmentFitFound;    // is first-fit segment found?

        let segmentCurrent = freeList;
        let segmentFitFound = false;
        //  search the freeList for a first-fit segment.
        if( (freeList[1] > (size + 2)) | (freeList[1] = (size + 2)) ) {
            let segmentFitFound = true;
        }
        while((~segmentFitFound) & (~(segmentCurrent[0] = 0))) {
            if( (segmentCurrent[1] > (size + 2)) | (segmentCurrent[1] = (size + 2)) ) {
                let segmentFitFound = true;
            }
        }
        // update the freeList and the fields of block to account for the allocation.
        if(segmentFitFound) {
            let segmentFirstFit = segmentCurrent;
            // the fields of block
            let block = (segmentFirstFit + segmentFirstFit[1] + 1) - (size - 1);
            let blocksizeField = block - 1;
            let blocksizeField[0] = size;
            // update the freeList
            let segmentFirstFit[1] = segmentFirstFit[1] - (size + 2);
            // If no memory was left in the segment,
            // or if the remaining part is practically too small,
            // the entire segment is eliminated from the freeList.
            // if(segmentFirstFit[1] = 0) { do eliminating process... }
        } else {
            // do attemp defragmentation.
            // do Memory.defrag();
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segmentCurrent, segmentLast;
        let o = o - 2;
        // get last segment in free list.
        let segmentCurrent = freeList;
        while(~(segmentCurrent[0] = 0)) {
            let segmentCurrent = segmentCurrent[0];
        }
        let segmentLast = segmentCurrent;
        // append this object to the end of the freeList.
        let segmentLast[0] = o;
        let o[0] = 0;
        return;
    }
}
